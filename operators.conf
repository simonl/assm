//rank   type op   substitute

/*
0   infixr :=  __rasg__
0   infixr =   __asg__
/*0   infixr ?=   {}asg__*/ 



10 : infixr
10 := : literal __asg__(&{0},{1})
10 = : literal __asg__(&{0},{1})
//10 ?= : literal __?asg__(&{0},{1})

20 : infixl
20 & : function __band__
20 | : function __bor__
20 ^ : function __bxor__
20 && : function __and__
20 || : function __or__
20 ^^ : function __xor__

25 : infixr
25 : : function __cons__
//25 ? : literal __getitem__({1}, {0})

30 : infixl
30 is : function __equ__
30 == : function __equ__
30 != : function __neq__
30 >= : function __geq__
30 <= : function __leq__
30 >  : function __gt__
30 <  : function __lt__

40 : infixl
40 + : function __add__
40 - : function __sub__

50 : infixl
50 * : function __mul__
50 / : function __div__
50 % : function __mod__
//50 %% : function __divmod__
//50 // : function __idiv__

60 : infixr
60 ** : function __pow__

70 : postfix
70 ++ : function __inc__
70 -- : function __dec__

80 : prefix
80 + : function __abs__
80 - : function __neg__
80 ~ : function __inv__
80 ! : function __not__

//90 . : literal  __attr__({0},"{1}")

//110 : outfix
//110 ( ) : do

//100 : post_outfix
//100 [ ] : function __getitem__
//100 { } : function __block__

/*

10  infixl &  __band__
10  infixl |   __bor__
10   infixl ^   __bxor__
10   infixl &&   __and__
10   infixl ||   __or__
10   infixl ^^   __xor__

20   infixl is   __equ__
20   infixl ==   __equ__
20  infixl !=   __neq__
20   infixl >=   __geq__
20   infixl <=   __leq__
20   infixl >   __gt__
20   infixl <   __lt__

25   infixr :   __cons__

30   infixl +   __add__
30   infixl -   __sub__

40   infixl *   __mul__
40   infixl /   __div__
40   infixl %    __mod__
//40   infixl //   __idiv__

50  infixr **   __pow__

55 pre @  __sqr__
55 pre $ __sqrt__

60   post ++   __inc__
60   post --   __dec__

70   pre ~   __inv__
70   pre -   __neg__
70   pre +   __abs__
70   pre !   __not__

//80   infixl .   __attr__





/*

compile(code) :
	code = preprocess(code)
	code = removeComments(code)
	code = tokenize(code)
	code = translateOperators(code)
	for function in iterFunctions(code) :
		


subsOp(text, op, place, start, subs)  
	index = text.find(op)
	if index != -1  
		
	return index

4 + 4
4.__add__(4)
__attr__(4, "__add__")(4)

obj.name.first + ","

[4, 5, 6]
array -> 4
*(&array + 12) -> 5
array[3] -> 5

__attr__(obj, "name").first + ","
__attr__(__attr__(obj, "name"), "first") + ","
__attr__(__attr__(__attr__(obj, "name"), "first"), "__add__")(",")

func = (x){ return x + x }

&a
movl %ebp, %eax
subl $12, %eax

a
movl %ebp, %eax
subl $12, %eax
movl (%eax), %eax

c = a b f g

map f [] = []
map f a b = f(a)   func(f, b)

__asg__(&c, __cons__(a, b))
__num__("4")

opInfo = {0 ([{"symbol" "=", "name" "asg", "output" "method"}], 
	{"type" "infix", "start" "right"})}

def doOps(text)  
	for level, (ops, info) in reversed(sorted(ops.items()))  
		indices = [ (op["symbol"], text.find(op["symbol"])) for op in ops if text.find(op["symbol"]) != -1]
		while True  
			op, index = nextOp(opInfo[level]["start"], indices)
			if index == -1  
				break 
			subsOp(text, op, opInfo[level])

def findOps(ops)  
	indices = []
	for op in ops  
		symbol = op["symbol"]
		text.find(symbol)

def nextOp(start, indices)  
	if indices  
		return max(indices) if start == "right" else min(indices)
	return -1
